//*
// ***** SEGMENT CLASS *****
// This class will be used to represent each part of the moving snake.
//*

class Segment {

//Add x and y member variables. They will hold the corner location of each segment of the snake.
int xPos;
int yPos;
// Add a constructor with parameters to initialize each variable.
Segment (int x, int y){
   xPos = x;
   yPos = y;
}


}


//*
// ***** GAME VARIABLES *****
// All the game variables that will be shared by the game methods are here
//*
Segment head;
int foodX;
int foodY;
int direction = UP;
int foodCount;
ArrayList<Segment> tail = new ArrayList<Segment>();

//*
// ***** SETUP METHODS *****
// These methods are called at the start of the game.
//*

void setup() {
size(500, 500);
head = new Segment(250, 250);
frameRate(20);
dropFood();
}

void dropFood() {
  //Set the food in a new random location
    foodX = ((int)random(50)*10);
    foodY = ((int)random(50)*10);
}



//*
// ***** DRAW METHODS *****
// These methods are used to draw the snake and its food 
//*

void draw() {
  background(0,0,0);
  drawFood();
  move();
  drawSnake();
  eat();
}

void drawFood() {
  //Draw the food
  fill(255, 0, 0);
  rect(foodX, foodY, 10, 10);
}

void drawSnake() {
  //Draw the head of the snake followed by its tail
fill(0, 255, 0);
rect(head.xPos, head.yPos, 10, 10);
}


//*
// ***** TAIL MANAGEMENT METHODS *****
// These methods make sure the tail is the correct length.
//*

void drawTail() {
  //Draw each segment of the tail 
fill(0, 255, 0);
for (Segment s: tail){
  rect(s.xPos, s.yPos, 10, 10);
}  
}

void manageTail() {
  //After drawing the tail, add a new segment at the "start" of the tail and remove the one at the "end" 
  //This produces the illusion of the snake tail moving.
  checkTailCollision();
  drawTail();
  tail.add(new Segment(head.xPos, head.yPos));
  tail.remove(0);
}

void checkTailCollision() {
  //If the snake crosses its own tail, shrink the tail back to one segment
  
}



//*
// ***** CONTROL METHODS *****
// These methods are used to change what is happening to the snake
//*

void keyPressed() {
  //Set the direction of the snake according to the arrow keys pressed
  if(key == CODED){
     if(keyCode == UP && direction!=DOWN){
       direction = UP;
    }
    else if(keyCode == DOWN && direction!=UP){
       direction = DOWN;
    }
    else if(keyCode == RIGHT && direction!=LEFT){
       direction = RIGHT;
    }
    else if(keyCode == LEFT && direction!=RIGHT){
       direction = LEFT;
    }
}
}
void move() {
  //Change the location of the Snake head based on the direction it is moving.
  
  switch(direction) {
  case UP:
    head.yPos-=10; 
    break;
  case DOWN:
    head.yPos+=10; 
    break;
  case LEFT:
   head.xPos-=10; 
    break;
  case RIGHT:
    head.xPos+=10; 
    break;
  }
checkBoundaries();
}

void checkBoundaries() {
 //If the snake leaves the frame, make it reappear on the other side
 if(head.xPos > 500){
   head.xPos = 0;
 }
 if(head.xPos < 0){
   head.xPos = 500;
 }
 if(head.yPos > 500){
   head.yPos = 0;
 }
 if(head.yPos < 0){
   head.yPos = 500;
 }
}

void eat() {
  //When the snake eats the food, its tail should grow and more food appear
if(head.xPos == foodX && head.yPos == foodY){
  foodCount++;
  dropFood();
  drawTail();
}
}